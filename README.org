#+STARTUP: indent
* NVil-Houdini AppLink
This program automates geometry interchange between NVil and Houdini.

** How does it work?
Let's say you're modeling something in Houdini, but soon realize that some things would be faster to complete when done with a dedicated subd modeler. You select a SOP that you want to edit and click an export button on a toolbar this AppLink ships with. Your geometry is immediately exported to NVil where you can edit it. After you're done, you select objects for export and either launch AppLink's composite tool (also included) or File->Clipboard->Copy(obj) it. The first is available only on pure Windows setup and uses RPC to notify Houdini to load and freeze modified geometry as a new node. The latter requires you to manually press a shelf button in Houdini to load modified geometry back, and is a workaround to a problem with lack of network communication between Wine and its host OS (who knows, it might be resolved eventually). In both cases the frozen file SOP will be added either as an orphan, somwhere in your current ObjNode, or as a child of a selected node.

** Requirements
*** Possible setups
Like it was mentioned above, the AppLink works with the following configurations:
- NVil and Houdini installed on MS Windows (I tested and used it on Windows 7 only, and frankly, due to lack of access to MS OS, I cannot test the AppLink on this system anymore), later in the text referred as "Windows/Windows".
- NVil installed on a ~WINEPREFIX~, Houdini installed its host GNU/Linux operating system. Referred as "Wine/GNU+Linux".

*** Python
Python 2.7.x (or Hython if your paths are correctly configured to include SideFX modules).
~pip~ installed and up-to-date.

*** Network ports
When running both programs on Windows, port 18811 must be open for communication as this the default port used by ~hrpyc~.

*** rpyc
On Windows/Windows you will also need to install ~rpyc~ with ~pip~:
#+BEGIN_SRC shell
pip install rpyc
#+END_SRC

** Installation
I have simplified the installation process since the initial version of this AppLink, so it's not as convoluted as it's used to be.

Start by cloning the repo into your ~$HOUDINI_USER_PREF_DIR~. On Windows its typically your ~Documents~ directory. On GNU/Linux its whatever you tell it to be. Or just download the repo manually and unpack it there.

*** houdini.env
You need to put the following global variables in your ~houdini.env~ file (or define them system-wide):
#+BEGIN_SRC sh
NVIL_APPLINK_DIR=
WIN_APPDATA=
#+END_SRC
~NVIL_APPLINK_DIR~ currently it's only used by the shelf to tell it where the icons are located.
~WIN_APPDATA~ is the path to your Windows user's %APPDATA%, usually found in ~c:\Users\username\Application Data~.

**** Windows/Windows example:
#+BEGIN_SRC sh
NVIL_APPLINK_DIR="c:\Users\YourUser\Documents\Houdini 17.5"
WIN_APPDATA="c:\Users\YourUser\Application Data"
#+END_SRC

Theoretically, you could try using ~%HOME%\Documents\Houdini 17.5~ in ~NVIL_APPLINK_DIR~, and ~%APPDATA%~ in ~WIN_APPDATA~, but I cannot test it anymore so I can just speculate on whether it would work or not.

**** Wine/GNU+Linux example:
#+BEGIN_SRC sh
NVIL_APPLINK_DIR="$HOUDINI_USER_PREF_DIR/nvil-houdini-applink"
WIN_APPDATA="$HOME/wineprefix/drive_c/users/youruser/Application Data"
#+END_SRC

*** Additional steps for Windows/Windows setup
Open NVil and choose Composite Tools->Import Composite Tools. Point at ~composite_tools/export-to-houdini.xml~ in the repo to install it.

Dive into Edit->Customize->Composite Tools, select ~Export to Houdini~ tool and then ~Common Shortcut Tools >> Launch App(*)~ from /Set 1/.

In /Param input string/, modify ~Path(string)~ parameter to point at your Python 2.7.x executable, for example: ~c:\Python27\python.exe~.
~Arguments(path)~ should by default be okay and set to ~nvil_houdini_applink.py~. This tells NVil to launch the module after ~Clipboard Copy (obj)~ command, which will point Python to ~nvil_houdini_applink.export_from_nvil()~.

** How to use the AppLink?
In both setups, make sure that both: NVil and Houdini have been started. ;)

*** Windows/Windows
Start ~hrpyc~ server by clicking the *RPC* button located on  *NVil AppLink* shelf, or just type:
#+BEGIN_SRC python
import hrpyc
hrpyc.start_server()
#+END_SRC
in the Houdini's Python shell. This will get RPC server up and running and listening on default port 18811.

To export your model to NVil, select a SOP containing polygonal geometry and hit *Export* shelf tool. This saves your geo to ~$WIN_APPDATA/DigitalFossils/Media/Clipboard/ClipboardObj.obj~ and instructs NVil to load the file. You will be taken to NVil's window with import/export options modal window open. After clicking *OK*, NVil will load the model.

When you're done editing it, select what you want to export and then launch *Export to Houdini* composite tool. You will once again be presented with import/export modal window and after clicking OK, the model will be passed to Houdini.

See [[Importing from NVil][Importing from NVil]] for further steps.

*** Importing from NVil
Importing from NVil happens automatically on Windows/Windows setup. If you're using Wine/GNU+Linux setup, it requires pressing the *Import* button.

Import will either succeed or fail, depending on where you were in Houdini network at the moment of importing the modified geometry, and which node you had selected at that moment.

There are two rules guaranteeing successful import:
1. You need to be inside an ~ObjNode~, like ~geo~ SOP.
2. You need to have either nothing, or a ~SopNode~ selected.

By selecting nothing, a loose and frozen ~file~ operator linking to ~$WIN_APPDATA/DigitalFossils/Media/Clipboard/ClipboardObj.obj~ will be created in the current network path.

By selecting a SOP node, the same frozen ~file~ SOP will be created, but it will become a child of the selected node.

And that's it.


